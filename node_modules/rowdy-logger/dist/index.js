'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _cliTable = require('cli-table');

var _cliTable2 = _interopRequireDefault(_cliTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var METHODS = ['get', 'post', 'put', 'delete']; // http://stackoverflow.com/questions/14934452/how-to-get-all-registered-routes-in-express/31501504#31501504

var beginRegisteringRoutes = function beginRegisteringRoutes(app) {
  var routes = [];

  var hasRouteFunction = typeof app.route === 'function';
  var isExpress5 = !app.del;

  // monkey patch the `use` function to collect the Routers

  var oldUse = app.use;
  app.use = function () {
    var urlBase = arguments[0];

    for (var i = 1; i < arguments.length; i++) {
      if (arguments[i] && arguments[i].name === 'router') {
        var router = arguments[i];
        var results = collectRoutesFromRouter(urlBase, router);
        routes.push.apply(routes, (0, _toConsumableArray3.default)(results));
      }
    }

    return oldUse.apply(this, arguments);
    // why doesn't this work?
    // return oldUse(...arguments)
  };

  // find routes given app.get, app.post, etc.

  // it seems that in express 5, "app.get" uses the same functionality as Router
  // I guess "app = express()" is an instance of Router
  // so, do not patch these in Express 5. Otherwise, each route would get collected twice
  if (!isExpress5) {
    var _loop = function _loop(method) {
      var oldFn = app[method];

      app[method] = function () {
        if (arguments.length >= 2) {
          var path = arguments[0];
          collect(routes, method, path);
        }

        return oldFn.apply(this, arguments);
      };
    };

    var _arr = [].concat(METHODS, ['all']);

    for (var _i = 0; _i < _arr.length; _i++) {
      var method = _arr[_i];
      _loop(method);
    }
  }

  if (hasRouteFunction) {
    var oldRoute = app.route;
    app.route = function (path) {
      var result = oldRoute.apply(this, arguments);

      var _loop2 = function _loop2(_method) {
        var oldFn = result[_method];
        result[_method] = function () {
          routes.push({
            path: removeTrailingSlash(path),
            method: _method.toUpperCase()
          });

          return oldFn.apply(this, arguments);
        };
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(METHODS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _method = _step.value;

          _loop2(_method);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    };
  }

  return {
    print: function print() {
      return _print(routes);
    },
    getRoutes: function getRoutes() {
      return routes;
    }
  };
};

var collectRoutesFromRouter = function collectRoutesFromRouter(pathBase, router) {
  var routes = [];

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = (0, _getIterator3.default)(router.stack.filter(function (stackElement) {
      return stackElement.route;
    })), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var stackElement = _step2.value;

      var path = pathBase + stackElement.route.path;
      var methodsOnStackElement = (0, _keys2.default)(stackElement.route.methods);

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = (0, _getIterator3.default)(methodsOnStackElement), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var method = _step3.value;

          collect(routes, method, path);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return routes;
};

var collect = function collect(routes, method, path) {
  var upperMethod = method.toUpperCase();

  if (upperMethod === 'ALL' || upperMethod === '_ALL') {
    routes.push.apply(routes, (0, _toConsumableArray3.default)(METHODS.map(function (m) {
      return {
        method: m.toUpperCase(),
        path: removeTrailingSlash(path)
      };
    })));
  } else {
    routes.push({
      method: upperMethod,
      path: removeTrailingSlash(path)
    });
  }
};

var format = function format(routes) {
  var table = new _cliTable2.default({ head: ['Method', 'Path'] });

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = (0, _getIterator3.default)(routes), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var route = _step4.value;

      table.push((0, _defineProperty3.default)({}, route.method.toUpperCase(), [route.path]));
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  return '(╯°□°）╯︵ ┻━┻\n' + table.toString();
};

// '/some/route/' -> '/some/route'
var removeTrailingSlash = function removeTrailingSlash(path) {
  if (path !== '/' && path.endsWith('/')) {
    return path.substring(0, path.length - 1);
  } else {
    return path;
  }
};

var _print = function _print(routes) {
  console.log(format(routes));
};

exports.default = {
  begin: beginRegisteringRoutes
};